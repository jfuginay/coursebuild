-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.bounding_boxes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  question_id uuid,
  visual_asset_id uuid,
  label text NOT NULL,
  x double precision NOT NULL,
  y double precision NOT NULL,
  width double precision NOT NULL,
  height double precision NOT NULL,
  confidence_score double precision,
  is_correct_answer boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT bounding_boxes_pkey PRIMARY KEY (id),
  CONSTRAINT bounding_boxes_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id),
  CONSTRAINT bounding_boxes_visual_asset_id_fkey FOREIGN KEY (visual_asset_id) REFERENCES public.visual_assets(id)
);
CREATE TABLE public.chat_insights (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  course_id uuid,
  session_id text NOT NULL,
  message_id text NOT NULL,
  insight_type text NOT NULL CHECK (insight_type = ANY (ARRAY['struggling_concept'::text, 'learning_preference'::text, 'interest_expression'::text, 'goal_statement'::text, 'confusion_point'::text, 'understanding_confirmation'::text, 'engagement_pattern'::text, 'frustration_indicator'::text, 'success_moment'::text])),
  insight_content jsonb NOT NULL,
  confidence_score double precision CHECK (confidence_score >= 0::double precision AND confidence_score <= 1::double precision),
  user_message text NOT NULL,
  assistant_response text,
  conversation_context jsonb,
  extracted_concepts ARRAY,
  extracted_topics ARRAY,
  sentiment_score double precision CHECK (sentiment_score >= '-1'::integer::double precision AND sentiment_score <= 1::double precision),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT chat_insights_pkey PRIMARY KEY (id),
  CONSTRAINT chat_insights_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT chat_insights_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id)
);
CREATE TABLE public.course_segments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  course_id uuid,
  segment_index integer NOT NULL,
  start_time integer NOT NULL,
  end_time integer NOT NULL,
  title text,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying]::text[])),
  previous_segment_context jsonb,
  cumulative_key_concepts jsonb,
  questions_count integer DEFAULT 0,
  processing_started_at timestamp with time zone,
  processing_completed_at timestamp with time zone,
  error_message text,
  retry_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  worker_id text,
  planning_status character varying DEFAULT 'pending'::character varying,
  planned_questions_count integer DEFAULT 0,
  questions_generated_count integer DEFAULT 0,
  CONSTRAINT course_segments_pkey PRIMARY KEY (id),
  CONSTRAINT course_segments_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id)
);
CREATE TABLE public.courses (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text,
  youtube_url text NOT NULL,
  video_summary text,
  total_duration integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  published boolean DEFAULT false,
  created_by uuid,
  is_segmented boolean DEFAULT false,
  total_segments integer DEFAULT 1,
  segment_duration integer DEFAULT 600,
  CONSTRAINT courses_pkey PRIMARY KEY (id),
  CONSTRAINT courses_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.learner_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  course_id uuid,
  event_type text NOT NULL CHECK (event_type = ANY (ARRAY['WATCH'::text, 'QUIZ_WRONG'::text, 'HINT_SHOWN'::text])),
  video_timestamp integer,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT learner_events_pkey PRIMARY KEY (id),
  CONSTRAINT learner_events_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT learner_events_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.pipeline_stages (
  stage text NOT NULL,
  display_name text NOT NULL,
  description text NOT NULL,
  estimated_duration_seconds integer NOT NULL,
  weight double precision NOT NULL CHECK (weight >= 0.0::double precision),
  order_index integer NOT NULL,
  CONSTRAINT pipeline_stages_pkey PRIMARY KEY (stage)
);
CREATE TABLE public.processing_progress (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  course_id uuid,
  session_id text NOT NULL,
  stage text NOT NULL CHECK (stage = ANY (ARRAY['initialization'::text, 'planning'::text, 'generation'::text, 'quality_verification'::text, 'storage'::text, 'completed'::text, 'failed'::text])),
  stage_progress double precision NOT NULL DEFAULT 0.0 CHECK (stage_progress >= 0.0::double precision AND stage_progress <= 1.0::double precision),
  overall_progress double precision NOT NULL DEFAULT 0.0 CHECK (overall_progress >= 0.0::double precision AND overall_progress <= 1.0::double precision),
  current_step text,
  details jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT processing_progress_pkey PRIMARY KEY (id),
  CONSTRAINT processing_progress_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  email text NOT NULL UNIQUE,
  display_name text,
  avatar_url text,
  bio text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_active_at timestamp with time zone DEFAULT now(),
  preferred_difficulty character varying DEFAULT 'medium'::character varying CHECK (preferred_difficulty::text = ANY (ARRAY['easy'::character varying, 'medium'::character varying, 'hard'::character varying]::text[])),
  notification_preferences jsonb DEFAULT '{"email": true, "new_features": false, "course_updates": true}'::jsonb,
  total_courses_taken integer DEFAULT 0,
  total_courses_created integer DEFAULT 0,
  total_questions_answered integer DEFAULT 0,
  total_questions_correct integer DEFAULT 0,
  current_streak integer DEFAULT 0,
  longest_streak integer DEFAULT 0,
  onboarding_completed boolean DEFAULT false,
  subscription_tier text NOT NULL DEFAULT 'free'::text,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.question_plans (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  course_id uuid NOT NULL,
  segment_id uuid,
  segment_index integer NOT NULL,
  question_id character varying NOT NULL,
  question_type character varying NOT NULL,
  timestamp numeric NOT NULL,
  status character varying DEFAULT 'planned'::character varying,
  plan_data jsonb NOT NULL,
  error_message text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT question_plans_pkey PRIMARY KEY (id),
  CONSTRAINT question_plans_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT question_plans_segment_id_fkey FOREIGN KEY (segment_id) REFERENCES public.course_segments(id)
);
CREATE TABLE public.question_progress (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  course_id uuid,
  session_id text NOT NULL,
  question_id text NOT NULL,
  question_type text NOT NULL,
  status text NOT NULL CHECK (status = ANY (ARRAY['planned'::text, 'generating'::text, 'completed'::text, 'failed'::text, 'validating'::text])),
  progress double precision NOT NULL DEFAULT 0.0 CHECK (progress >= 0.0::double precision AND progress <= 1.0::double precision),
  reasoning text,
  provider_used text,
  processing_time_ms integer,
  error_message text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT question_progress_pkey PRIMARY KEY (id),
  CONSTRAINT question_progress_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id)
);
CREATE TABLE public.question_quality_metrics (
  id integer NOT NULL DEFAULT nextval('question_quality_metrics_id_seq'::regclass),
  question_id uuid,
  overall_score integer NOT NULL,
  educational_value_score integer NOT NULL,
  clarity_score integer NOT NULL,
  cognitive_appropriateness_score integer NOT NULL,
  bloom_alignment_score integer NOT NULL,
  misconception_handling_score integer NOT NULL,
  explanation_quality_score integer NOT NULL,
  meets_threshold boolean NOT NULL DEFAULT false,
  verification_confidence numeric NOT NULL,
  quality_analysis text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT question_quality_metrics_pkey PRIMARY KEY (id),
  CONSTRAINT question_quality_metrics_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id)
);
CREATE TABLE public.questions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  course_id uuid NOT NULL,
  timestamp integer NOT NULL,
  question text NOT NULL,
  type text NOT NULL CHECK (type = ANY (ARRAY['multiple-choice'::text, 'true-false'::text, 'short-answer'::text, 'hotspot'::text, 'matching'::text, 'sequencing'::text, 'annotation'::text])),
  options jsonb,
  correct_answer text NOT NULL,
  explanation text,
  visual_context text,
  accepted boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  has_visual_asset boolean DEFAULT false,
  visual_asset_id uuid,
  fallback_prompt text,
  visual_question_type character varying CHECK ((visual_question_type::text = ANY (ARRAY['hotspot'::character varying, 'matching'::character varying, 'sequencing'::character varying, 'annotation'::character varying]::text[])) OR visual_question_type IS NULL),
  frame_timestamp integer,
  metadata jsonb,
  quality_score integer,
  meets_threshold boolean DEFAULT false,
  transcript_segment_id integer,
  transcript_context text,
  segment_id uuid,
  segment_index integer,
  generation_status character varying DEFAULT 'completed'::character varying,
  generated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT questions_pkey PRIMARY KEY (id),
  CONSTRAINT questions_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT questions_segment_id_fkey FOREIGN KEY (segment_id) REFERENCES public.course_segments(id),
  CONSTRAINT questions_visual_asset_id_fkey FOREIGN KEY (visual_asset_id) REFERENCES public.visual_assets(id)
);
CREATE TABLE public.recommendation_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  recommended_courses jsonb NOT NULL,
  recommendation_context jsonb NOT NULL,
  insights_snapshot jsonb,
  performance_snapshot jsonb,
  user_feedback text CHECK (user_feedback = ANY (ARRAY['helpful'::text, 'not_helpful'::text, 'neutral'::text])),
  courses_enrolled ARRAY,
  created_at timestamp with time zone DEFAULT now(),
  feedback_at timestamp with time zone,
  CONSTRAINT recommendation_history_pkey PRIMARY KEY (id),
  CONSTRAINT recommendation_history_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT fk_recommendation_user FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_course_creations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  course_id uuid,
  role character varying DEFAULT 'creator'::character varying CHECK (role::text = ANY (ARRAY['creator'::character varying, 'collaborator'::character varying, 'reviewer'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_course_creations_pkey PRIMARY KEY (id),
  CONSTRAINT user_course_creations_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT user_course_creations_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id)
);
CREATE TABLE public.user_course_enrollments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  course_id uuid,
  enrolled_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  last_accessed_at timestamp with time zone DEFAULT now(),
  progress_percentage integer DEFAULT 0 CHECK (progress_percentage >= 0 AND progress_percentage <= 100),
  current_question_index integer DEFAULT 0,
  total_questions_answered integer DEFAULT 0,
  total_questions_correct integer DEFAULT 0,
  is_completed boolean DEFAULT false,
  completion_score integer,
  CONSTRAINT user_course_enrollments_pkey PRIMARY KEY (id),
  CONSTRAINT user_course_enrollments_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT user_course_enrollments_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.user_course_ratings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  course_id uuid,
  rating integer NOT NULL CHECK (rating >= 1 AND rating <= 5),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  rating_context character varying DEFAULT 'completion'::character varying CHECK (rating_context::text = ANY (ARRAY['completion'::character varying, 'mid_course'::character varying, 'question_success'::character varying, 'manual'::character varying]::text[])),
  engagement_score double precision DEFAULT 0,
  time_spent_minutes integer DEFAULT 0,
  questions_answered integer DEFAULT 0,
  completion_percentage double precision DEFAULT 0,
  CONSTRAINT user_course_ratings_pkey PRIMARY KEY (id),
  CONSTRAINT user_course_ratings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_course_ratings_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id)
);
CREATE TABLE public.user_hint_cooldowns (
  user_id uuid NOT NULL,
  course_id uuid NOT NULL,
  last_hint_timestamp timestamp with time zone,
  hint_count integer DEFAULT 0,
  CONSTRAINT user_hint_cooldowns_pkey PRIMARY KEY (user_id, course_id),
  CONSTRAINT user_hint_cooldowns_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_hint_cooldowns_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id)
);
CREATE TABLE public.user_learning_profiles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  learning_style jsonb DEFAULT '{}'::jsonb,
  preferred_difficulty jsonb DEFAULT '{}'::jsonb,
  topic_interests jsonb DEFAULT '{}'::jsonb,
  struggling_concepts jsonb DEFAULT '[]'::jsonb,
  mastered_concepts jsonb DEFAULT '[]'::jsonb,
  stated_goals jsonb DEFAULT '[]'::jsonb,
  engagement_metrics jsonb DEFAULT '{}'::jsonb,
  time_preferences jsonb DEFAULT '{}'::jsonb,
  content_preferences jsonb DEFAULT '{}'::jsonb,
  profile_version integer DEFAULT 1,
  last_updated timestamp with time zone DEFAULT now(),
  total_insights_processed integer DEFAULT 0,
  profile_confidence double precision DEFAULT 0.5,
  CONSTRAINT user_learning_profiles_pkey PRIMARY KEY (id),
  CONSTRAINT user_learning_profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_question_responses (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  question_id uuid,
  enrollment_id uuid,
  selected_answer integer,
  selected_answers ARRAY,
  response_text text,
  response_data jsonb,
  is_correct boolean,
  points_earned integer DEFAULT 0,
  max_points integer DEFAULT 1,
  response_time_ms integer,
  attempted_at timestamp with time zone DEFAULT now(),
  attempt_number integer DEFAULT 1,
  is_final_attempt boolean DEFAULT true,
  is_skipped boolean DEFAULT false,
  rating smallint DEFAULT '0'::smallint,
  CONSTRAINT user_question_responses_pkey PRIMARY KEY (id),
  CONSTRAINT user_question_responses_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id),
  CONSTRAINT user_question_responses_enrollment_id_fkey FOREIGN KEY (enrollment_id) REFERENCES public.user_course_enrollments(id),
  CONSTRAINT user_question_responses_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.video_transcripts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  course_id uuid,
  video_url text NOT NULL,
  video_summary text,
  total_duration integer,
  full_transcript jsonb NOT NULL,
  key_concepts_timeline jsonb,
  generated_at timestamp with time zone DEFAULT now(),
  model_used character varying DEFAULT 'gemini-2.5-flash'::character varying,
  processing_time_ms integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  metadata jsonb,
  CONSTRAINT video_transcripts_pkey PRIMARY KEY (id),
  CONSTRAINT video_transcripts_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id)
);
CREATE TABLE public.visual_assets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  course_id uuid,
  question_id uuid,
  timestamp integer NOT NULL,
  asset_type character varying NOT NULL CHECK (asset_type::text = ANY (ARRAY['frame'::character varying, 'thumbnail'::character varying, 'generated'::character varying]::text[])),
  image_url text NOT NULL,
  thumbnail_url text,
  width integer,
  height integer,
  file_size integer,
  alt_text text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT visual_assets_pkey PRIMARY KEY (id),
  CONSTRAINT visual_assets_course_id_fkey FOREIGN KEY (course_id) REFERENCES public.courses(id),
  CONSTRAINT visual_assets_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id)
);