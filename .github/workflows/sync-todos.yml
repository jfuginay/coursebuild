name: Sync TODOs with Issues

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  sync-todos:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Sync TODOs to Issues
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read TODO.md file
          const todoPath = path.join(process.cwd(), 'TODO.md');
          if (!fs.existsSync(todoPath)) {
            console.log('TODO.md not found');
            return;
          }
          
          const todoContent = fs.readFileSync(todoPath, 'utf8');
          
          // Parse TODO items that aren't completed
          const todoRegex = /- \[ \] \*\*(.*?)\*\*: (.*?)(?=\n  -|\n- \[|\n\n|$)/gs;
          const todos = [];
          let match;
          
          while ((match = todoRegex.exec(todoContent)) !== null) {
            const priority = match[1];
            const description = match[2].replace(/\n  -/g, '\n-').trim();
            
            todos.push({
              title: `[${priority}] ${description.split('\n')[0]}`,
              body: description,
              labels: ['task', priority.toLowerCase().replace(' priority', '')]
            });
          }
          
          // Get existing issues
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'task',
            state: 'open'
          });
          
          // Create new issues for TODOs that don't exist
          for (const todo of todos) {
            const existingIssue = issues.find(issue => 
              issue.title.includes(todo.title.replace(/^\[.*?\] /, '').substring(0, 30))
            );
            
            if (!existingIssue) {
              console.log(`Creating issue: ${todo.title}`);
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: todo.title,
                body: `Auto-generated from TODO.md\n\n${todo.body}`,
                labels: todo.labels
              });
            }
          }
          
          console.log(`Processed ${todos.length} TODO items`);